package test

import (
	"bytes"
	"compress/zlib"
	"encoding/binary"
	"encoding/hex"
	"encoding/xml"
	"fmt"
	"golang.org/x/crypto/curve25519"
	"io/ioutil"
	"log"
	"math/rand"
	"strconv"
	"strings"
	"testing"
	"time"
	"ws-go/libsignal/util/bytehelper"
	"ws-go/protocol/newxxmp"
	"ws-go/protocol/utils"
	"ws-go/waver"
)

func TestSort(t *testing.T) {
	//2:x7Rfqb23
	jids := []string{"19048786157", "84769601210"}
	t.Log(utils.CalcPHash(jids))
}

// CalculateSharedSecret uses DH Curve25519 to find a shared secret. The result of this function
// should be used in `DeriveSecrets` to output the Root and Chain keys.
func CalculateSharedSecret(theirKey, ourKey [32]byte) [32]byte {
	log.Println("CalculateSharedSecret", hex.EncodeToString(bytehelper.ArrayToSlice(theirKey)), hex.EncodeToString(bytehelper.ArrayToSlice(ourKey)))
	var sharedSecret [32]byte
	curve25519.ScalarMult(&sharedSecret, &ourKey, &theirKey)

	return sharedSecret
}

func TestCalculateSharedSecret(t *testing.T) {
	priKeyHex := "e8cdaf5b51f01efe0a40a40223d572af55ec9b723b77ce0c49d898767e184a4e"
	pubKeyHex := "282c60808cc705d43726c366e3a76c3f4d2ecad5012588436e87d27cdc954e48"
	priKey, _ := hex.DecodeString(priKeyHex)
	pubKey, _ := hex.DecodeString(pubKeyHex)

	t.Log(hex.EncodeToString(bytehelper.ArrayToSlice(CalculateSharedSecret(bytehelper.SliceToArray(pubKey), bytehelper.SliceToArray(priKey)))))
}

func int24(i int) []byte {
	bArr := make([]byte, 3)
	bArr[2] = byte(i)
	bArr[1] = (byte)(i >> 8)
	bArr[0] = (byte)(i >> 16)
	return bArr

}

func TestToken(t *testing.T) {
	iqId, err := strconv.Atoi("02")
	if err != nil {
		t.Fatal(err)
	}
	t.Log(iqId)

	c, _ := hex.DecodeString("02789cb55a4b8f5c47154edc4e088f050a201620145a820d9d997a3fec1551081025bc1209a4286adde9beb61bf74c377d7b32\n71ac2c60dd0b241688d72e0b7e000b24d82158b240620d0b2436f68c584432d091f8eade5b75ce4ca0ed60902c4f5575d5a953a7cee33ba7eebd273ef5f83f1e195cfee813fffceefebd47ef7de89b773e69efbeb17d523ff7d2487ef92b23fd85d11\n7e2e81935aabebe7d5c7f7bf9ecd7e2ddb7b78f85608cd97e60555f5bd5cd8df16cfad6df1ffdfdbdc726dfdf5e964a988deddb46f9cd766085e8fb32c80dfe8832603170faebb633b03a9685d2f8be3dd0d66dcebed4b5bd4bf4a40a5dd7055a6175\n5911a3dffca1a7e9451e35c676cdb3bfe4212b426e2aa73329a5a3d96cf5ede1ea785e37c32baf0c97b3c9fa78550f47c3665dad8f1b34268ba3753559a7e6b47e6d36c1c457dfec59f18a24a0ac2516236337d21cab6466c3496a82b93b9fedb9d3b\na882398cd57bb66f0920416cbc2a08a242cd66d7f3c99cf2637c7ebc57872a35a8fe7b3a39ba3c3ba69aaebf5b8b9b158f543df598d278b693d5aae16d3e3493f38a9d6d57c71bdeb2cd38ac9ba1a2d17cdba6d60f9b2194dd627d5b89a8e26c7cd7a\n71383e5ecd73b3a7d92dc7a444a1191dccde183775b59adcc837a3e91c240045475252914463399e2b770e9d82d0b7c31bebf5b2b9b2bf7f7272b27782d336d572b937591cee2fd6cbfdc962796bbf9f1e21ffd33fe6fd1919e348d2aac8d109b6912\n54d116eb31ddf1ecae195dbc3c3d9d1b83a9aae16b3e918db8e9be3e512d2ada7e3d7ea55335b1c0daf0cd59ec23f09ad49b3678b66f74ce9866fb65a75f7e7657f1d885b57f81a44678aa6fbd28c4a656db12a4bf992296a1f23a9bd7071b3fdb092\nc21beb2166a3bdee0d153a4596a2cb9e2e9258bc2bd232d26cde79e4d18f3cb7584deae9b350a183aaa95f9c5d5f556b1ceec5ea086ab0dabf56cde6f5f4e545f7437d458aab9f5f2e5f6c35737674fd5b87cbe59720cf39a62e8e5e585cffca623db\nb369bb434aec8abdf4cd78b052fcc0e5e585453cc9ae3cf4beb6ab53e4e830de67cfea059af60a698f6d28d7a3edf3fac6e1dd4dfa893b49fada1174bf8af24f0e7c00b2c1c4b5e5c9aaf2e9bfde365a2864eff0bf66f128727d56173ab79fe68f6cc\n6a36bd9e16bcbe3c7c7a76b4aefbd33ddd1d0b3f4c0f9e5edf58d5d5f4e9667d3cb989d5e26a2f42931dc1c0db22585b1c2714bb6861b4e4d702e9a6a5db0e641b4e93b7d1c566b01f398a201c5376529fa21d507622625c286d0bb54a6a627aef6bc\na8d5f5616d6a7b3d910c3c95d3f169ce9d4e8ec6ef941683a1fb11f481ba5d1ea5ce8509e8ec33c40a493517b10e1f6939a179751d67ae6777d16f8d92f8b5cbd65bb820e93a720f2310fc330ca455858c37620f6ca09bc618b994f96e70f16cbad3a\ncdee49b2d8448a218be082a398e08a3e494331261ab339fb72a6c7a32b6f5be232388abae4e5108c438ea7da23187fbcf8eab8b9f3b156807f2ea72b121b7859b8b285da206aa67f4e6ece7ed18f934d18d2209582e0c7f3dea48b9e8555992e9b830\nac31458130060cd48a6e649156de7b77e787b389ba6b00fffb077305fdc6cf6523881c39eb5f18e02cb72ba6ca1c0bf9f860898001280c2de49b5635e2177b058a7a0d9dca8ebf583ccc7f67bb343f8d23db8b1d766f5c98e45c99b8d0fc1d0b88fef\ncd5ed5dc3a9aec5a82a0bd877d1e9495fbd1eb42fe834ebbb6589d542bb8f57e418fae06e75c9ca550e8a54f97f78ddbc3a63a5c82f7ebb8c257a03323394aba215e1dbd0285b5bc6b8c485da50d7a0ad4d0b3dd6f2a68d14d4547039aa60e9ad608d\n337e16f4cbf204df2ceb9fe97600aa9f44b0022cbbf04a369136089207b86da2e6234e70f11b9ddb7eb7823d95229cad2ae1f942a73958ca1df512a236c6e6b2705b5a3617beb1822eb0238773c17546b98c92906bc2c8f33c56779020cd6311ca793\nef932a3b63f277914030e4d583161837fceb5bd97e99a752e4d19943b1c93dfd2053e4fb9a8ca593d7213f02b4c3c20139292853ef981251b8b9dfe420a37a3775fa329340d908918e829f2dcecd788ae7819dd9525b15ae0686c594bcf0ec27fddf5\nf9533c1a76e2f4384b19f0aaff9b30c2a58a221cbd601e6d28341e5e9dcd6903c1ce10a0754fe567697a25c8809e42f03495e01c7f45394c655e67d6cd907ae9c4d972cfd01fcde7efa3ec87d5af76728b902b40d08e17b8719568ebf0ddcddfadcab\n34d6663cdde0c1bc3aba393eacd3bcab4ba0c4d964b6ac8ed6e3e3a65e5d3d58c1414e2ae435fd8c9c211dd6d3597575554fead9723dee72bdd26d9766b5ca71fcf46d38a2f79fdc1e56d3698297e39e54ca1112da4fc1e582f7e3073eac819af72ea\ne1d0debd797b3fe544d3d415e0a703e1a52c220f76c4a504b2a7170dccc8eb0ba4b613f1765b0506b13b5149887be8f1e469efe83731d0daf57f3eaf55b9cd96bf3c549ee5366f27fce76460f2ea30b1c3f8888d2d1d3b19a740420311b4c3031588d\nb062d2d87f929f0c3e586b85560e2460b922f544d4a9175207dd906e00ba2dd19170055dcfa18780d04919e9bb4aae5758e19071eddc12a05129f85415412882ba50580bd0de52023fca1aa3a246a2863bfdef2959ab445401683d71fb303c391b95f\n0206334328287a1044e02f02b40778c0281f1214841e2161900e2b3f1088cbb28756b0dae57859694d55a0727a4d62d2950c52f2eda18a31172e701ef470b285505e85348fc09fd30a4a05fd00123a0cf20f950279460250481618399513d142de9bd\n72320a9c547ab75345ef7b44e80112aca0607380283bf982f101ff20a34db6d6e965aab1591f707b1a14dedb62291dec5c7881f318a4680fbe3add0c186f35d9984e8360ae4a58f80f015ca4765e7b4b0c88232890e9a4a0a1e520ef405d81e87b5ba\nd614d0296a05d085aaafb88c10212aae4c54c3e0734357ad3d1f21e400090547b1cc8ef3484fb9142caaa0dbc8f81a01d6efca168c1f7c20525201dc0dc43f1e592fe22320887fb523bad2ac9da24072354765fd0b564e00a9edf38ff9e163b405a40\n43af11abb5dee9fadeb51641c85860cc14addc6eb789d8213478834e25bf690c120ce8058ccb776c4038c627d7629df73b8fb08b1408c11ba7e0081fe03a23701e06102df4d022f6ee54e3f744facd37fb2cd11a5627014e7edc09134a812018b7d97\ne8623a211874323187c8ae8c9687b2c9cde31ded7c1ca0c446564681669cd259fc923f26cba8a74a98e594a3f8c0f9b1652f7a405abf92856d862ef0658dee369538a45970ac61f68aa04c192d803c9e59425e6a5114b2fc84150ddc850b2145d6049\n1a66511d5c0b9658b0578e54363bbb977f10c4baa3e4d05072e84a9d6fe0f9f1e94816d8feeca7997aa9e70c60912513d194316a2a0e6a476c091b188b54f4768e6566a91a87f559be652b67d83134a59b94e169c3df79287d75a2a43ff48ce552ba3\n6d07bb9a0ce5e34a0df54982a1b0556e8502ce9ca9bdefd51f7f7cef39bed17ff475950cedd591916b9edf69211398f4e3967aa9b6475a39916b7978f2d7ca9dad97c1f67bfa3cc95b448d381ad729b3bbf2d4977aa144097ca55b2e4913ddb7946aa\n98092e8c3d92045665d08ad5acb5d8dcf953df09c694c51e29f33b8f5c7efe7c2929bd87185c5b5f311a29afda4249f248544a696b475a423036f40524d1d65bda41288fe3830629085271ef4ba90920c500e6c8b664034784f0aa9dcc3f68dd55924\n6c0a1c1e651eb5ce84695a5b95176d5ad329a004c1046e70a50db575d45a814b1d298d6def139dafac48ecd7dabdadfcfad01c2f6650d02075292f37310cc7012c5c73c225788c9df8e54190050d79950db77a5ec4573ba2a5a59e4e16a930434cdf1\n387d2b145346e0e252854bd932e0f3b5e51184cc740a432360d03276b055f4e7d72420746104a1f71c7bc17973e10c3e4a7961590ca22b47e611f4db9a1c0dc8aec6887c218f004b727185842f73ad31219954006fb72e034878cf0f402d3be6f208c\ncd75c18019c6a1929235ab696c0461214e43b1b1dec792ad091d0eb51ea23c806cf5941286c49b081ae004abbe07e3a1a340288e2b390da01ab5bf6d92227495fba0120612aac4266de166bf134e675ae1ee7b19072998b63098dbf6bcc6b9fc772e9\nda32c820d3cb712a8fb52efc6fccdf929f63cfab48eb7234b8e42c2bc651b931b0d71604cf935c75a3e75ae8d8e6f4c95cbb2b11c549f2955ab3ba5c022a974276f5602c6fab089c28ee69053dab04f6e1057b61d2ec430644defe55c9d3a3bba3222\nc321d868c083c204c9cc762f0d8917d1fc01e14752ccb8223c17af69cef22af4ab290eb29b489f26838805653f996bdb3b3973be3e98c16b8f103404141a6ccb515e5e9770a4b86c4c542ae6675521f0c8b69ace65da46413e2fb442e8e8dae5593fa\n60b1b8399a1d35eb0a323accd378fcf44c5a54f065ef63b81b9dd580d7d709e54834cf9ecff13e6eeebc92e3bd62dcd3d21009379d7b83e58568faf845139584f90af8a1070662c5329b09ec4948329c21985628925e2a5bbf95e5ce2ae582e90d898\n2bdbe22612d0b1356df7eff76aea056f3f9e20479cc7cd6acdf553a7cea7cb5105d8514b1fdd977ddb65e98004cdbed32112f9124a52eaf3b3e75bed4f8d4855a63310da64da470c00fad662aa04fc7322356970f4cc28e19b9e38ff404a11069d86b\n1cfbca80270dc2539a81e1fc9516253032927d817c495e147b35a6b79f18baefc17af695a7d76fb856de666e0d8e60fbc474d65407f37ada4b83a5299aa512b8d7f7a78282464c145970591f6053bd1eddf9cd66fb18bc5ff695d6b3dc8cbd6597671\n19ff2c992219e3e49b3c98d58faf04391edc0a6c8fb4b7a6b675f4e28e6e9102f37db0f422d44701a26688a07a7f9de91deb3eb779a1226cfbd13bb20e686b2733afb2b11665f4f38f6ec858cfedc1710c8bfcb3d07cabfd87724a6dc89e3feb77c4f\n87a0c03e8289c5672acbbfa8e0dfb5d03e81dc8b0ea49d81fc92e652a19499470880fdcde9cbbd2854b92d2f981b0b343d50f48d485dfb8f3470b925858a2cfbd43c378fe9d1af68a3219fed15ffeac1e5488fbb362ca4b20747266ae2d8923278fa0\n2c5d0e72b9e59b962176cf3c59c9d9294d9877d829e8c952b5f0ba567e5225c25d80da5cf1fedbf000d367cce")
	t.Log(string(c))
	t.Log(hex.EncodeToString(int24(10041672)))
	t.Log(strconv.ParseInt("9f5a6f", 16, 0))
	//baseData, _ := base64.StdEncoding.DecodeString("MTU3Li0tMzYsB4Al3Jf0E++lcI0DycuGGhn4j3iwDD3jUI+3vT2g0yLKs+KpsHr/cosA2BTECXA820Fz+AqFRJs26SXauto/W8tfIBnnBCB7GU2TNKhyNb5ytmObVMOo+JPfISKt3uowQuOo9JDKMLauoChKgKfTliJe3MaT9A/01qYXE5GovHugIw==")
	//t.Log(string(baseData))

	binary.BigEndian.PutUint32(c, 74711218)
	t.Log(hex.EncodeToString(c))
	rand.Seed(time.Now().UnixNano())

	intn := rand.Intn(16)
	ending := make([]byte, intn, byte(intn))
	for i, _ := range ending {
		ending[i] = byte(intn)
	}
	t.Log(ending)
	t.Log(3 & 2)
	d, _ := hex.DecodeString("02789cfbc125c8f28657ba835597fd1703f30fc61f2c8d9cff59c52458a62bfe6560640a77f46565fcc8cc60c0cdd4c02b969e9f9f9e93aaebe81f1ca0909fa7905b9c6b616969d6f19a8bb92c272740bfa2bc30c1a292fa8e33d23477162664e5a66718646b68442a682b88725d77d768f7e2606c68e4a4136c3500f9072416e233d2303200252261df28c6c103b3b1419f9d1ac1510f5d8c8748f5d730a8b12531aa3bfd3fb371b27736e0bd0af02ba42731a4b125c4881263b04a1807a4d29509a4b2a90aa83288c98c9109001cde5446")
	//i := []byte("02789cfbc125c8f28657ba835597fd1703f30fc61f2c8d9cff59c52458a62bfe6560640a77f46565fcc8cc60c0cdd4c02b969e9f9f9e93aaebe81f1ca0909fa7905b9c6b616969d6f19a8bb92c272740bfa2bc30c1a292fa8e33d23477162664e5a66718646b68442a682b88725d77d768f7e2606c68e4a4136c3500f9072416e233d2303200252261df28c6c103b3b1419f9d1ac1510f5d8c8748f5d730a8b12531aa3bfd3fb371b27736e0bd0af02ba42731a4b125c4881263b04a1807a4d29509a4b2a90aa83288c98c9109001cde5446")
	r, err := zlib.NewReader(bytes.NewReader(d[1:]))
	if err != nil {
		t.Fatal(err)
	}
	a, _ := ioutil.ReadAll(r)
	t.Log(hex.EncodeToString(a))
}

func TestXToken(t *testing.T) {
	newxxmp.SetWAXXMPVersion(waver.NewWA41())
	token := newxxmp.NewToken(0)
	d, err := hex.DecodeString
	if err != nil {
		t.Fatal(err)
	}
	iToken := token.NewFrom(d)
	t.Log(iToken)

	node := &newxxmp.Node{}
	fromNode := node.From(iToken)
	//a := make([]int,0)
	//for _, child := range fromNode.Children[3].Children {
	//	aa, _ := strconv.ParseInt(hex.EncodeToString(child.GetChildrenByTag("id").GetData()), 16, 0)
	//	a =append(a,int(aa))
	//}
	//sort.Ints(a)
	//fmt.Println(a)
	fmt.Println(fromNode.GetString())
}

func TestNewXXMP(t *testing.T) {
	//<ib from="@s.whatsapp.net"><offline count="0"/></ib>
	//<presence type="available"/>
	//f8032a0586
	//<iq id="3" xmlns="w:p" type="get" to="@s.whatsapp.net"><ping/></iq>
	//f80a 11 04 49 1b 36 05 22 07 fa 00 03 f8 01 f8 01 37
	//
	//f8 0a 11 04 49 1b 36 05 22 07 fa 00 03 f8 01 f8 01 37
	//f8 0a 1104491b36052207fa0003f8093704491b36052207fa0003
	//f8 0a 1104491b36052207faff01fc02313103f8093704491b36052207faff01fc02313103

	//<iq id="1" xmlns="urn:xmpp:whatsapp:push" type="get" to="@s.whatsapp.net"><config/></iq>
	// f80a1104151b6b052207fa0003f801f80141
	// f80a1104151b6b052207fa0003f801f80141
	/*<iq id="01" xmlns="status" type="get" to="@s.whatsapp.net">
		<status>
			<user jid="6283827948009@s.whatsapp.net"/>
		</status>
	</iq>*/
	// f80a1104741b0b052207fa0003f801f8020bf801f803170cfaff876283827948009f03
	// f80a1104741b0b052207fa0003f801f8020bf801f803170cfaff876283827948009f03
	// f80a1104741b0b052207fa0003f801f8020bf801f803170cfaff87fc0d3632383338323739343830303903
	// f80a1104741b0b052207fa0003f801f8020bf801f803170cfaff8703

	// <ib from='s.whatsapp.net'><dirty type='account_sync' timestamp='1614238348'/></ib>
	newxxmp.SetWAXXMPVersion(waver.NewWA41())
	attributes := make([]newxxmp.Attribute, 1)
	attributes[0] = newxxmp.NewAttribute("from", "@s.whatsapp.net")

	attributes2 := make([]newxxmp.Attribute, 2)
	attributes2[0] = newxxmp.NewAttribute("type", "account_sync")
	attributes2[1] = newxxmp.NewAttribute("whitelist", "1614846525")

	node := &newxxmp.Node{
		Tag:        "ib",
		Attributes: attributes,
		Children: []*newxxmp.Node{
			{
				Tag:        "dirty",
				Attributes: attributes2,
				Children:   nil,
				Data:       nil,
			},
		},
		Data: nil,
	}
	node.Children.AddNode(&newxxmp.Node{
		Tag: "from",
	})
	tokenList := node.GetTokenArray()
	t.Log(hex.EncodeToString(tokenList.GetBytes()))
	t.Log(node.GetString())
	nodes := newxxmp.Nodes{}
	nodes.AddNode(node)
	emptyNode := newxxmp.EmptyNode("ib", node)
	log.Println(emptyNode.GetString())
	t.Log(hex.EncodeToString(emptyNode.GetTokenArray().GetBytes()))
}

func TestXml(t *testing.T) {
	decoder := xml.NewDecoder(strings.NewReader(`
		<iq from="@s.whatsapp.net" type="result" id="00">
			<media_conn auth="AWQ_EDzm_4EOwqJgxTjsU7sVG07elgGa6pJNacmnkIRD2X25x0oAiK62d-E" ttl="300" auth_ttl="21600" max_buckets="12" id="80301210" is_new="0"/>
		</iq>
	`))
	//var t xml.Token
	//var inItemGroup bool
	/*<iq from="@s.whatsapp.net" type="result" id="00">
		<media_conn auth="AWQ_EDzm_4EOwqJgxTjsU7sVG07elgGa6pJNacmnkIRD2X25x0oAiK62d-E" ttl="300" auth_ttl="21600" max_buckets="12" id="80301210" is_new="0"/>
	</iq>*/
	node := &newxxmp.Node{}
	n := &newxxmp.Node{}
	for t, err := decoder.Token(); err == nil; t, err = decoder.Token() {
		switch token := t.(type) {
		case xml.StartElement:
			n.Tag = token.Name.Local
			fmt.Println(token.Name.Local)
			for _, attr := range token.Attr {
				n.Attributes = append(n.Attributes, newxxmp.NewAttribute(attr.Name.Local, attr.Value))
				fmt.Println(attr.Name.Local, "|", attr.Value)
			}

		case xml.EndElement:
			/*	node.Children = append(node.Children,n)
				n = &newxxmp.Node{}*/
			fmt.Println(token.Name.Local)
		}
	}
	fmt.Println(node)
}

//获取属性值
func getAttributeValue(attr []xml.Attr, name string) string {
	for _, a := range attr {
		if a.Name.Local == name {
			return a.Value
		}
	}
	return ""
}
